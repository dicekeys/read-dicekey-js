/// <reference types="emscripten" />

declare module "read-dicekey-js" {

    export enum MemoryAllocatedInDiceKeyImageProcessorModule { _ = 0 }
    export type PtrAllocatedInDiceKeyImageProcessorModule = number & MemoryAllocatedInDiceKeyImageProcessorModule;
    export type HasPtrAllocatedInDiceKeyImageProcessorModule = {byteOffset: PtrAllocatedInDiceKeyImageProcessorModule}

    export class DiceKeyImageProcessor {
        constructor();
        //   .function("processJsImageData", &DiceKeyImageProcessor::processJsImageData)
        processImageData: (width: number, height: number, data: Uint8ClampedArray | Uint8Array | Buffer) => Boolean;
        //    .function("renderAugmentationOverlay", &DiceKeyImageProcessor::renderAugmentationOverlay)
        renderAugmentationOverlay: (width: number, height: number, data: PtrAllocatedInDiceKeyImageProcessorModule) => Boolean;
        // .function("diceKeyReadJson", &DiceKeyImageProcessor::jsonKeySqrRead)
        diceKeyReadJson: () => String;
        // .function("isFinished", &DiceKeyImageProcessor::isFinished)  }
        isFinished: () => Boolean;
        // All embind-generated objects are given a delete() method to destruct and clean up memory
        delete: () => void;
    }

    export interface DiceKeyImageProcessorModule extends EmscriptenModule {
        DiceKeyImageProcessor: new () => DiceKeyImageProcessor;
    }

    interface DiceKeyImageProcessorModulePromise {
        then: (fn: (DiceKeyImageProcessor: DiceKeyImageProcessorModule) => any) => void
    }

    // Mirroring the last line of the .js file generated by emscripten in es6 mode
    const Module: () => DiceKeyImageProcessorModulePromise;
    export default Module;

}